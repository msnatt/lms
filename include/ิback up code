function leaveMeet() {
    console.log("leave meet.");

    if (currentRoomId !== 0) {
        console.log(`Sending leave message for room: ${currentRoomId} and user: ${currentUserId}`);
        socket.send(JSON.stringify({
            type: "leave",
            room_id: currentRoomId,
            user_id: currentUserId
        }));
    }

    // ปิดและลบ peerConnections ทั้งหมด
    for (let id in peerConnections) {
        if (peerConnections[id]) {
            console.log(`Closing peer connection for user: ${id}`);
            peerConnections[id].close();
        }
    }
    peerConnections = {};

    // หยุด local stream และปิดกล้อง/ไมค์
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
        console.log("Local stream stopped.");
    }

    // ล้างวิดีโอ local
    const localVideo = document.getElementById("localVideo");
    if (localVideo) localVideo.srcObject = null;

    // ล้างวิดีโอ remote ทั้งหมด
    const remoteVideosContainer = document.getElementById("remoteVideosContainer");
    if (remoteVideosContainer) {
        remoteVideosContainer.innerHTML = "";
    }

    console.log("✅ All peer connections closed and video streams cleared.");
}

async function selectRoomChat(roomId, roomName) {
    console.log(`Attempting to select room: ${roomId} (${roomName})`);
    if (roomId !== currentRoomId) {

        if (Object.keys(peerConnections).length > 0) {
            console.log("There are active peer connections, leaving the meeting...");
            leaveMeet();
        }

        const chatHeader = document.getElementById("chat-header");
        const chatBox = document.getElementById("chat-box");
        const meetbox = document.getElementById("meet-box");
        meetbox.style.display = 'block';

        // 1. อัปเดตหัวข้อห้อง
        chatHeader.innerText = `${roomName}`;

        // กำหนดห้องปัจจุบันใหม่ จาก div ที่เลือก
        currentRoomId = roomId;
        console.log(`Joining room ${currentRoomId} for user: ${currentUserId}`);
        socket.send(JSON.stringify({
            type: "join",
            room_id: currentRoomId,
            user_id: currentUserId
        }));
        // โหลดแชทของห้องแชทใหม่
        await loadChat(roomId, roomName);
    }
};

async function Confirm_connect(camSelect, micSelect) {
    console.log("Confirming connection with selected camera and microphone.");
    if (Object.keys(peerConnections).length > 0) {
        console.log("Closing active peer connections before confirming.");
        leaveMeet();
    }

    toggleSettingPanel();
    const stream = await startVideo(camSelect.value, micSelect.value);
    if (stream) {
        console.log("Starting video with selected devices.");
        // createOffer(); // หรือฟังก์ชันเชื่อมต่ออื่น ๆ
    }
}

async function startVideo(deviceId, audioId) {
    console.log(`Starting video with deviceId: ${deviceId}, audioId: ${audioId}`);
    try {
        let stream;

        try {
            // พยายามขอ video + audio stream
            stream = await navigator.mediaDevices.getUserMedia({
                video: deviceId ? { deviceId: { exact: deviceId } } : true,
                audio: audioId ? { deviceId: { exact: audioId } } : true,
            });
            console.log("✅ Got video+audio stream", stream);
        } catch (err) {
            console.warn("⚠️ Failed to get audio, trying video only...", err);

            // ถ้า audio error, fallback ขอ video อย่างเดียว
            stream = await navigator.mediaDevices.getUserMedia({
                video: deviceId ? { deviceId: { exact: deviceId } } : true,
            });
            console.log("✅ Got video stream only", stream);
        }

        // ตั้งค่า video preview และเก็บ stream
        const localVideo = document.getElementById("localVideo");
        if (localVideo) localVideo.srcObject = stream;
        localStream = stream;

        return stream;

    } catch (error) {
        console.error("❌ Cannot access media devices:", error);
        return null;
    }
}

socket.onopen = function () {
    console.log("Connected to WebSocket");
};

socket.onmessage = async function (event) {
    console.log("Received message from WebSocket:", event.data);
    const data = JSON.parse(event.data);
    const fromId = data.from_user_id;
    switch (data.type) {
        case "join":
        case "leave":
        case "chat":
            handleTextMessage(data);
            break;
        case "offer":
            console.log(`Handling offer from user ${fromId}`);
            await handleOffer(data.offer, data.from_user_id);
            break;
        case "answer":
            console.log(`Handling answer from user ${fromId}`);
            await handleAnswer(data.answer, data.from_user_id);
            break;
        case "candidate":
            console.log(`Handling candidate from user ${fromId}`);
            await handleCandidate(data.candidate);
            break;
        case "new-peer":
            console.log(`Handling new peer connection for user ${data.new_user_id}`);
            await createOfferTo(data.new_user_id);
            break;
        default:
            console.warn("Unknown message type:", data.type);
    }
};

async function handleOffer(offer, fromId) {
    console.log(`📨 Received offer from: ${fromId}`);
    await createPeerConnection(fromId);
    await peerConnections[fromId].setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await peerConnections[fromId].createAnswer();
    await peerConnections[fromId].setLocalDescription(answer);
    socket.send(JSON.stringify({
        type: "answer",
        answer,
        room_id: currentRoomId,
        from_user_id: currentUserId,
        target_id: fromId
    }));
}

async function handleAnswer(answer, fromId) {
    console.log(`📨 Received answer from: ${fromId}`);
    if (peerConnections[fromId]) {
        await peerConnections[fromId].setRemoteDescription(new RTCSessionDescription(answer));
    }
}

async function handleCandidate(candidate, fromId) {
    console.log(`📨 Received candidate from: ${fromId}`);
    if (peerConnections[fromId]) {
        await peerConnections[fromId].addIceCandidate(new RTCIceCandidate(candidate));
    }
}

function createPeerConnection(targetId) {
    if (peerConnections[targetId]) return;

    console.log(`Creating new peer connection for targetId: ${targetId}`);
    const pc = new RTCPeerConnection({
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
    });

    peerConnections[targetId] = pc;

    pc.onicecandidate = event => {
        if (event.candidate) {
            console.log(`Sending ICE candidate to ${targetId}`);
            socket.send(JSON.stringify({
                type: "candidate",
                candidate: event.candidate,
                room_id: currentRoomId,
                from_user_id: currentUserId,
                target_id: targetId
            }));
        }
    };

    pc.ontrack = event => {
        console.log(`Received track from peer: ${targetId}`);
        let remoteVideo = document.getElementById(`remote-${targetId}`);
        if (!remoteVideo) {
            remoteVideo = document.createElement("video");
            remoteVideo.id = `remote-${targetId}`;
            remoteVideo.autoplay = true;
            remoteVideo.playsInline = true;
            document.getElementById("remoteVideosContainer").appendChild(remoteVideo);
        }
        remoteVideo.srcObject = event.streams[0];
    };

    // เพิ่ม local track
    localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

    return pc;
}

async function createOfferTo(targetId) {
    console.log(`Creating offer to targetId: ${targetId}`);
    await createPeerConnection(targetId);
    const offer = await peerConnections[targetId].createOffer();
    await peerConnections[targetId].setLocalDescription(offer);

    socket.send(JSON.stringify({
        type: "offer",
        offer,
        room_id: currentRoomId,
        from_user_id: currentUserId,
        target_id: targetId
    }));
}
